* UI

#+begin_src emacs-lisp

  ;; macos specific settings
  (when (eq system-type 'darwin)
    (setq mac-option-key-is-meta nil
          mac-command-key-is-meta t
          mac-command-modifier 'super
          mac-option-modifier 'meta
          ns-use-native-fullscreen t)

    ;; title bar settings
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))

    ;; keybindings
    (global-set-key (kbd "s-<right>") (kbd "C-e"))
    (global-set-key (kbd "s-<left>") (kbd "M-m"))
    (global-set-key (kbd "s-<backspace>") 'kill-whole-line))
  ;; shell environment
  (use-package exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns))
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))

  ;; theme
  (use-package base16-theme
    :straight t
    :config
    (load-theme 'base16-gruvbox-dark-hard t))

  ;; modeline
  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode)
    :init
    (set-face-attribute 'mode-line nil :height 130)
    (set-face-attribute 'mode-line-inactive nil :height 130)
    :config
    (setq doom-modeline-buffer-file-name-style 'relative-from-project
          doom-modeline-icon (display-graphic-p)
          doom-modeline-major-mode-color-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-minor-modes nil
          doom-modeline-github nil
          doom-modeline-version nil
          doom-modeline-height 10
          doom-modeline-bar-width 1
          doom-modeline-buffer-encoding nil
          doom-modeline-vcs-max-length 50
          doom-modeline-window-width-limit fill-column))

  ;; window sizing
  (use-package golden-ratio
    :straight t
    :diminish golden-ratio-mode
    :init
    (golden-ratio-mode 1))

  ;; command completion
  (use-package which-key
    :straight t
    :init
    (which-key-mode)
    :config
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 1.0)
    :diminish which-key-mode)

  ;; Region expansion
  (use-package expand-region
    :straight t
    :config
    (global-set-key (kbd "C-;") 'er/expand-region))

  ;; utf-8 everywhere
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; basic UI settings
  (tool-bar-mode -1)
  (delete-selection-mode 1)
  (pixel-scroll-precision-mode 1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)

  (setq-default
   inhibit-startup-screen t
   initial-scratch-message nil
   sentence-end-double-space nil
   scroll-conservatively 10000
   pop-up-windows nil
   ring-bell-function 'ignore
   frame-title-format '((:eval (if (buffer-file-name)
                                   (abbreviate-file-name (buffer-file-name))
                                 "%b")))
   indent-tabs-mode nil
   tab-width 2)

  ;; shift between buffers using shift+arrow keys.
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src

* dev tools

#+begin_src emacs-lisp
  ;; project management
  (use-package projectile
    :straight t
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map))
    :init
    (setq-default projectile-cache-file
                  (expand-file-name ".projectile-cache" user-emacs-directory))
    (add-hook 'prog-mode-hook #'projectile-mode)
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy)
    (setq-default projectile-enable-caching t
                  projectile-mode-line-prefix ""
                  projectile-sort-order 'recentf
                  projectile-mode-line '(:eval (projectile-project-name))))

  ;; version control
  (use-package magit
    :straight t
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-set-upstream-on-push 'askifnotset))

  ;; syntax checking
  (use-package flycheck
    :straight t
    :hook (prog-mode . flycheck-mode)
    :config
    (setq flycheck-check-syntax-automatically '(save mode-enabled)))

  ;; completion framework
  (use-package company
    :straight t
    :hook (prog-mode . company-mode)
    :config
    (global-company-mode)
    (setq company-tooltip-limit 10
          company-idle-delay 0
          company-echo-delay 0
          company-minimum-prefix-length 2
          company-require-match nil
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-tooltip-flip-when-above nil
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil
          company-transformers '(company-sort-by-occurrence)))

  ;; lsp support
  (use-package lsp-mode
    :straight t
    :commands lsp
    :init
    (setq lsp-keymap-prefix "s-l")
    :hook ((clojure-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (python-mode . lsp-deferred)
           (rust-mode . lsp-deferred)
           (java-mode . lsp-deferred))
    :config
    (setq lsp-idle-delay 0.500
          lsp-enable-symbol-highlighting nil
          lsp-headerline-breadcrumb-enable nil
          lsp-modeline-code-actions-enable nil
          lsp-modeline-diagnostics-enable nil
          lsp-completion-provider :capf))


  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-sideline-enable nil))

  ;; parens
  (use-package smartparens
    :straight t
    :hook ((prog-mode markdown-mode) . smartparens-mode))

  (use-package paredit
    :straight t
    :hook ((clojure-mode . enable-paredit-mode)
           (cider-repl-mode . enable-paredit-mode)
           (emacs-lisp-mode . enable-paredit-mode)))

  (use-package mermaid-mode
    :ensure t
    :mode ("\\.mmd\\'" . mermaid-mode))

  (use-package aidermacs
    :bind (("C-c a" . aidermacs-transient-menu))
    :config
    :custom
    (aidermacs-use-architect-mode t)
    (aidermacs-default-model "claude-sonnet-4-20250514"))

  (use-package vterm :straight t)

  (use-package claude-code
    :straight (:type git :host github :repo "stevemolitor/claude-code.el" :branch "main" :depth 1
                     :files ("*.el" (:exclude "images/*")))
    :bind-keymap
    ("C-c c" . claude-code-command-map)
    :config
    (setq claude-code-terminal-backend 'vterm)
    (claude-code-mode))
#+end_src

* navigation and search

#+begin_src emacs-lisp
(use-package ivy
  :straight t
  :bind (("s-b" . ivy-switch-buffer)
         ("C-c C-r" . ivy-resume))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
        ivy-height 10
        ivy-count-format "(%d/%d) ")
  (define-key ivy-minibuffer-map (kbd "C-m") 'ivy-alt-done))

(use-package counsel
  :straight t
  :after ivy
  :bind (("C-x C-r" . counsel-recentf)
         ("C-x C-f" . counsel-find-file)
         ("M-x" . counsel-M-x))
  :config
  (setq counsel-rg-base-command "rg -i -w --no-heading --line-number %s ."
        recentf-max-saved-items 50
        recentf-auto-cleanup (* 24 60 60)))

(use-package swiper
  :straight t
  :bind (("C-s" . swiper)
         ("s-f" . swiper)))

(use-package counsel-projectile
  :straight t
  :config
  (counsel-projectile-mode))

(use-package wgrep
  :straight t)

(use-package rg
  :straight t
  :config
  (setq rg-command-line-flags '("-w"))
  (setq rg-ignore-case 'smart))
#+end_src

* programming languages

#+begin_src emacs-lisp
  ;; clojure
  (use-package clojure-mode
    :straight t
    :hook ((clojure-mode . lsp-deferred)
           (clojurec-mode . lsp-deferred)
           (clojurescript-mode . lsp-deferred)))

  (use-package clojure-mode-extra-font-locking
    :straight t)

  (use-package cider
    :straight t
    :hook ((cider-mode . eldoc-mode)
           (cider-repl-mode . paredit-mode)
           (cider-repl-mode . company-mode)
           (cider-repl-mode . (lambda ()
                                (local-set-key (kbd "C-l") 'cider-repl-clear-buffer)))
           (cider-mode . company-mode)))

  (use-package clj-refactor
    :straight t
    :config
    (setq cljr-warn-on-eval nil)
    :hook
    (clojure-mode . (lambda ()
                      (clj-refactor-mode 1)
                      (yas-minor-mode 1)
                      (cljr-add-keybindings-with-prefix "C-c C-m"))))

  ;; go
  (use-package golint
    :straight t)

  (defun custom-go-mode ()
    (display-line-numbers-mode 1))

  (use-package go-mode
    :straight t
    :hook ((go-mode . lsp-deferred)
           (go-mode . custom-go-mode)
           (go-mode . (lambda ()
                    (add-hook 'before-save-hook #'lsp-format-buffer nil t)
                    (add-hook 'before-save-hook #'lsp-organize-imports nil t)))))


  ;; rust
  (use-package rust-mode
    :straight t
    :hook ((rust-mode . flycheck-mode)
           (rust-mode . lsp-deferred)
           (rust-mode . smartparens-mode)
           (rust-mode .
                      (lambda ()
                        (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)))))

  (use-package cargo
    :straight t
    :hook (rust-mode . cargo-minor-mode))

  (use-package toml-mode
    :straight t)

  ;; python - simplified setup using LSP
  (use-package lsp-pyright
    :ensure t
    :custom (lsp-pyright-langserver-command "basedpyright") 
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))

  (setq python-shell-completion-native-disabled-interpreters '("python"))
  (setq python-shell-interpreter "python3")

  (use-package pipenv
    :straight t
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))

  ;; haskell
  (use-package haskell-mode
    :straight t
    :init
    (setq haskell-process-type 'stack-ghci)
    :mode (("\\.hs\\'" . haskell-mode))
    :interpreter ("haskell" . haskell-mode)
    :config
    (setq haskell-compile-cabal-build-command "stack build")
    (setq haskell-process-log t)
    :hook ((haskell-mode . lsp-deferred)
           (haskell-mode . interactive-haskell-mode)))

  (use-package lsp-haskell
    :straight t)

  (use-package dante
    :straight t
    :after haskell-mode
    :commands 'dante-mode
    :init
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'dante-mode)
    :config
    (add-hook 'dante-mode-hook 'haskell-mode-setup))

  ;; ruby
  (use-package rbenv
    :straight t)

  (use-package enh-ruby-mode
    :straight t
    :mode (("\\.rb\\'" . enh-ruby-mode))
    :interpreter ("ruby" . enh-ruby-mode))

  (use-package rubocop
    :straight t)

  (use-package ruby-hash-syntax
    :straight t)

  (use-package rubocopfmt
    :straight t)

  (use-package inf-ruby
    :straight t)

  (use-package rspec-mode
    :straight t)

  (use-package robe
    :straight t
    :hook (ruby-mode . robe-mode))

  ;; purescript
  (use-package purescript-mode
    :straight t)

  (use-package psc-ide
    :straight t)

  ;; zig
  (use-package zig-mode
    :straight t)

  ;; kotlin
  (use-package kotlin-mode
    :straight t
    :hook ((kotlin-mode . lsp-deferred)
           (kotlin-mode . flycheck-mode)
           (kotlin-mode . company-mode)))

  ;; java
  (use-package lsp-java
    :straight t
    :hook (java-mode . lsp-deferred))
#+end_src

* miscellanea

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))

  (use-package yaml-mode
    :straight t)

  (use-package json-mode
    :straight t)

  (use-package protobuf-mode
    :straight t
    :hook (protobuf-mode . flycheck-mode))

  (use-package dockerfile-mode
    :straight t
    :mode ("Dockerfile\\'" . dockerfile-mode))

  (use-package web-mode
    :straight t
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.json\\'"  . web-mode))
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2))

  ;; latex and pdf support
  (use-package auctex
    :straight t
    :defer t
    :custom
    (TeX-auto-save t)
    :config
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))))

  (use-package pdf-tools
    :straight t
    :config
    (pdf-tools-install)
    :hook (pdf-view-mode . pdf-continuous-scroll-mode))

  (use-package company-auctex
    :straight t)

  ;; snippets and completion
  (use-package yasnippet
    :straight t
    :demand t
    :config
    (setq yas-verbosity 1 yas-wrap-around-region t)
    (yas-reload-all)
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight t)

  (use-package auto-yasnippet
    :straight t)

  ;; additional utilities
  (use-package speed-type
    :straight t)

  (use-package format-all
    :straight t
    :bind ("C-c SPC" . format-all-buffer))

  (use-package undo-tree
    :straight t
    :bind ("s-Z" . 'undo-tree-redo)
    :config
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

  (use-package mastodon
    :straight t
    :custom
    (mastodon-instance-url "https://mastodon.social"))

  ;; github Copilot
  (use-package copilot
    :ensure t
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
    :bind (:map copilot-completion-map
                ("<tab>" . copilot-accept-completion)
                ("TAB" . copilot-accept-completion)))

  ;; performance monitoring
  (use-package esup
    :straight t
    :custom
    (esup-depth 0))

  (provide 'init)
#+end_src
